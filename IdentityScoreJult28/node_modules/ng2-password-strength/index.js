import { Component, Input, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

var PasswordStrengthComponent = (function () {
    /**
     * @param {?} forms
     */
    function PasswordStrengthComponent(forms) {
        this.forms = forms;
        this.class = '';
        this.id = '';
        this.width = 1;
        this.colors = ['#D9534F', '#DF6A4F', '#E5804F', '#EA974E', '#F0AD4E', '#D2AF51', '#B5B154', '#97B456', '#7AB659', '#5CB85C', '#5CB85C'];
        this.color = '#D9534F';
        this.message = "You password must be at least 6 characters in length and contain the following:-";
        this.symbool = { 'isit': 'false' };
        this.nucbool = { 'isit': 'false' };
        this.numbool = { 'isit': 'false' };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    PasswordStrengthComponent.prototype.onKey = function (event) {
        this.value = event.target.value;
        // Additions :-D
        var /** @type {?} */ noc = this.value.length; // Number of Characters
        var /** @type {?} */ nuc = this.value.replace(/[^A-Z]/g, "").length; // Uppercase Letters
        var /** @type {?} */ nlc = this.value.replace(/[^a-z]/g, "").length; // Lowercase Letters
        var /** @type {?} */ num = this.value.replace(/[^0-9]/g, "").length; // Numbers
        var /** @type {?} */ symr;
        var /** @type {?} */ sym = this.value.match(/[ !@#$Â£%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/g); // Symbols
        if (!sym) {
            symr = 0;
        }
        else {
            symr = sym.length;
        }
        
        // Deductions :-(
        var /** @type {?} */ aucr; // Letters Only Resolver
        var /** @type {?} */ auc = this.value === this.value.toUpperCase();
        if (auc == false) {
            aucr = noc;
        }
        else {
            aucr = 0;
        }
         // Letters Only
        var /** @type {?} */ anvr; // Number Only Resolver
        var /** @type {?} */ anv = +this.value;
        if (anv !== NaN || anv !== 0) {
            anvr = noc;
        }
        else {
            anvr = 0;
        }
         // Numbers Only
        var /** @type {?} */ cons; // Repeat Characters Resolver
        if (this.value.match(/(.)\1\1/)) {
            cons = noc * noc;
        }
        else {
            cons = 0;
        } // Repeat Characters
        // The MF math
        var /** @type {?} */ additions = ((noc * 4) + ((noc - nuc) * 2) + ((nlc - nuc) * 2) + (num * 4) + ((symr) * 6));
        var /** @type {?} */ deductions = ((aucr) + (anvr) + cons);
        var /** @type {?} */ total = additions - deductions;
        if (sym == null) {
            this.symbool['isit'] = false;
        }
        else {
            this.symbool['isit'] = true;
        }
        if (nuc == 0) {
            this.nucbool['isit'] = false;
        }
        else {
            this.nucbool['isit'] = true;
        }
        if (num == 0) {
            this.numbool['isit'] = false;
        }
        else {
            this.numbool['isit'] = true;
        }
        if (total < 101) {
            if (total < 0) {
                this.width = 1;
            }
            else {
                this.width = total;
            }
        }
        else {
            this.width = 100;
        }
        this.updateBar();
    };
    /**
     * @return {?}
     */
    PasswordStrengthComponent.prototype.updateBar = function () {
        var /** @type {?} */ i = Math.round(this.width / 10);
        this.color = this.colors[i];
    };
    return PasswordStrengthComponent;
}());
PasswordStrengthComponent.decorators = [
    { type: Component, args: [{
                selector: 'password-strength',
                template: "<div class=\"progress\">\n      <input type=\"password\" (keyup)=\"onKey($event)\" ngClass=\"{{class}}\" id=\"{{id}}\">\n      <p>{{values}}</p>\n      <div class=\"progress_bar\" [ngStyle]=\"{'width': width + '%', 'background': color}\">\n      </div>\n      {{message}}\n      <div ngClass=\"{{symbool.isit}}\">Symbol</div>\n      <div ngClass=\"{{nucbool.isit}}\">Uppercase Char</div>\n      <div ngClass=\"{{numbool.isit}}\">Number</div>\n  </div>\n  ",
                styles: ["\n      .progress_bar{\n          width: 0;\n          height: 5px;\n          padding: 0;\n          margin: 0;\n      }\n      .true {\n          color: green;\n      }\n      .false {\n          color: red;\n      }\n  "],
            },] },
];
/**
 * @nocollapse
 */
PasswordStrengthComponent.ctorParameters = function () { return [
    { type: FormsModule, },
]; };
PasswordStrengthComponent.propDecorators = {
    'class': [{ type: Input },],
    'id': [{ type: Input },],
};

var NgPasswordStrength = (function () {
    function NgPasswordStrength() {
    }
    /**
     * @return {?}
     */
    NgPasswordStrength.forRoot = function () {
        return {
            ngModule: NgPasswordStrength,
        };
    };
    return NgPasswordStrength;
}());
NgPasswordStrength.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    PasswordStrengthComponent
                ],
                exports: [
                    PasswordStrengthComponent
                ]
            },] },
];
/**
 * @nocollapse
 */
NgPasswordStrength.ctorParameters = function () { return []; };

export { NgPasswordStrength, PasswordStrengthComponent };
